// <auto-generated />
using DALPitalicaTVZ.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DALPitalicaTVZ.Migrations
{
    [DbContext(typeof(PitalicaContext))]
    partial class PitalicaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DALPitalicaTVZ.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Definition");

                    b.Property<int>("QuestionId");

                    b.Property<int>("Row");

                    b.Property<int>("Score");

                    b.Property<bool>("Type");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("DALPitalicaTVZ.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatorId");

                    b.Property<string>("ExamName");

                    b.Property<int>("MaxScore");

                    b.Property<DateTime>("WriteDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("DALPitalicaTVZ.Entities.ExamResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Score");

                    b.Property<int>("TestId");

                    b.Property<string>("UserName");

                    b.Property<DateTime>("WriteDate");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("DALPitalicaTVZ.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Definition");

                    b.Property<int>("ExamId");

                    b.Property<int>("Row");

                    b.Property<bool>("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DALPitalicaTVZ.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DALPitalicaTVZ.Entities.Answer", b =>
                {
                    b.HasOne("DALPitalicaTVZ.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DALPitalicaTVZ.Entities.Exam", b =>
                {
                    b.HasOne("DALPitalicaTVZ.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DALPitalicaTVZ.Entities.ExamResult", b =>
                {
                    b.HasOne("DALPitalicaTVZ.Entities.Exam", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DALPitalicaTVZ.Entities.Question", b =>
                {
                    b.HasOne("DALPitalicaTVZ.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
